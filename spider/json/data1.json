{
  "双链表的插入": {
    "学习链接": "https://blog.csdn.net/u013271921/article/details/45540749"
  },
  "平衡二叉树的插入": {
    "学习链接": "https://www.cnblogs.com/hi3254014978/p/9794044.html"
  },
  "先序线索二叉树": {},
  "输入": {
    "中文名": "输入",
    "外文名": "input",
    "拼    音": "shūrù",
    "释    义": "媒介从外部到内部的传输过程、[1]"
  },
  "单链表按序号查找结点值": {},
  "广义表": {
    "中文名": "广义表",
    "外文名": "Generalized table",
    "性    质": "广义线性的数据结构",
    "应用于": "应用于人工智能等领域"
  },
  "循环单链表": {},
  "串": {
    "中文名": "串",
    "拼    音": "chuàn",
    "部    首": "丨",
    "字    码": "4E32",
    "五    笔": "kkhk",
    "仓    颉": "LL",
    "郑    码": "jji",
    "笔    顺": "2512512",
    "字    级": "一级",
    "平水韵": "去声十六谏",
    "注    音": "ㄔㄨㄢˋ      ㄍㄨㄢˋ",
    "部外笔画": "6",
    "总笔画": "7",
    "四角码": "50006"
  },
  "数字分析法": {},
  "堆": {},
  "结点的度": {},
  "结点的深度": {},
  "简单选择排序": {
    "中文名": "简单选择排序",
    "外文名": "Select Sort",
    "分    类": "数据结构",
    "定    义": "排序算法 数据结构"
  },
  "树的基本术语": {},
  "可行性": {
    "中文名": "可行性",
    "外文名": "Feasibility",
    "包    含": "环境可行、经济可行",
    "包    括": "技术科学、社会学"
  },
  "时间复杂度": {
    "中文名": "时间复杂性",
    "外文名": "time complexity",
    "别    名": "时间复杂度",
    "简    介": "不同算法解决",
    "算法复杂度": "时间复杂度和空间复杂度",
    "时间复杂度": "时间频度 计算方法"
  },
  "字符数组": {
    "中文名": "字符数组",
    "外文名": "character array",
    "例    如": "char a[10]",
    "释    义": "用来存放字符数据的数组",
    "作    用": "存放字符或字符串",
    "类    别": "计算机软件术语"
  },
  "连通图": {
    "中文名": "连通图",
    "外文名": "connected graph",
    "学    科": "数学，计算机",
    "所属领域": "图论",
    "性    质": "连通性",
    "相关术语": "无向图"
  },
  "RL平衡旋转": {},
  "结构数组": {},
  "简单回路": {},
  "稀疏矩阵": {
    "中文名": "稀疏矩阵",
    "外文名": "sparse matrix",
    "优    点": "计算速度更快",
    "对应名词": "稠密矩阵",
    "适用范围": "大型科学工程计算领域",
    "存储格式": "列压缩存储或行压缩存储"
  },
  "二叉排序树的插入": {},
  "模式匹配算法": {},
  "平衡二叉树的查找": {},
  "链栈": {},
  "图的遍历": {
    "中文名": "图的遍历",
    "外文名": "traversal of graph",
    "所属学科": "计算机科学技术",
    "公布时间": "2018年"
  },
  "关键路径": {
    "中文名": "关键路径",
    "外文名": "Critical Path",
    "应用学科": "数学 运筹学 计算机",
    "别    称": "要径法",
    "应    用": "计划项目活动",
    "发    明": "杜邦公司"
  },
  "路径长度": {
    "中文名": "路径长度",
    "分    类": "学科",
    "学    科": "统计",
    "要    求": "计算机执行特定动作"
  },
  "中序线索二叉树": {},
  "选择排序": {
    "中文名": "选择排序、[1]",
    "外文名": "Selection Sort、[1]",
    "性    质": "不稳定的排序方法、[1]",
    "最好复杂度": "O(n^2)、[1]",
    "最差复杂度": "O(n^2)、[1]",
    "方    法": "通过比较、[1]",
    "应用领域": "计算机，数学、[1]"
  },
  "二叉排序树的查找": {},
  "多路归并排序": {},
  "子图": {
    "中文名": "子图",
    "外文名": "subgraph",
    "所属领域": "图论",
    "相关概念": "母图、真子图、补图等"
  },
  "强连通图": {
    "中文名": "强连通图",
    "外文名": "Strongly Connected Graph",
    "领    域": "数学",
    "对    象": "有向图",
    "释    义": "有向图中任意两点间都存在路径",
    "相关概念": "有向图的强连通分量"
  },
  "共享栈": {},
  "无序树": {},
  "孩子表示法": {},
  "索引存储": {
    "中文名": "索引存储",
    "性    质": "通信信息科学类术语"
  },
  "单链表按值查找表结点": {},
  "二叉排序树的定义": {},
  "单链表的定义": {},
  "层次遍历": {},
  "无向图": {
    "中文名": "无向图",
    "外文名": "undirected graph",
    "顶点集": "是非空集合",
    "边    集": "由无向边构成"
  },
  "哈夫曼树的构造": {},
  "AOV网": {
    "中文名": "顶点表示活动的网",
    "外文名": "Activity On Vertex Network",
    "弧": "用弧表示活动间的优先关系",
    "顶    点": "用顶点表示活动",
    "涉及领域": "计算机领域"
  },
  "哈希存储": {
    "中文名": "哈希存储",
    "性    质": "通信信息类科学术语"
  },
  "串的存储结构": {},
  "除留余数法": {},
  "链式队列的基本操作": {},
  "输出": {},
  "队列的基本概念": {},
  "静态链表": {
    "中文名": "静态链表",
    "外文名": "Static list",
    "拼    音": "jìng tài liàn biǎo",
    "相关概念": "线性链表",
    "描述方式": "用一维数组",
    "相关领域": "数学，制表"
  },
  "哈夫曼编码": {
    "中文名": "哈夫曼编码",
    "外文名": "Huffman Coding",
    "发表人": "David.A.Huffman",
    "发表时间": "1952年",
    "类    别": "程序算法"
  },
  "静态查找表": {},
  "双链表的基本操作": {},
  "散列函数": {
    "中文名": "哈希函数",
    "外文名": "Hash Function",
    "别    名": "散列函数",
    "表达式": "Addr = H（key）",
    "作用1": "加密",
    "作用2": "语音识别",
    "作用3": "散列表",
    "领    域": "计算机算法"
  },
  "关键字": {},
  "算法": {},
  "孩子兄弟表示法": {},
  "强连通分量": {
    "中文名": "强连通分量",
    "外文名": "strongly connected component",
    "所属学科": "图论",
    "别    名": "强连通分支"
  },
  "完全二叉树": {
    "中文名": "完全二叉树",
    "外文名": "Complete Binary Tree、[1]",
    "实    质": "效率很高的数据结构、[1]",
    "特    点": "叶子结点只可能在最大的两层出现、[1]",
    "应用学科": "计算机科学、[1]"
  },
  "链式队列判空": {},
  "删除": {
    "中文名": "删除",
    "外文名": "delete",
    "属    性": "计算机术语",
    "目    的": "腾出磁盘空间",
    "解    释": "将其从列表除名",
    "覆    写": "允许",
    "分    类": "逻辑删除、物理删除"
  },
  "压缩存储": {},
  "B+树": {
    "中文名": "B+树",
    "外文名": "B+ Tree",
    "性    质": "树数据结构",
    "特    点": "包含根节点、内部节点和叶子节点"
  },
  "队尾": {
    "中文名": "队尾",
    "外文名": "end",
    "所属学科": "奥运体育项目名词",
    "公布年度": "2008年"
  },
  "线性结构": {
    "中文名": "线性结构",
    "外文名": "linear structure",
    "类    型": "线性表，栈，队列",
    "性    质": "数据结构",
    "释    义": "n个数据元素的有序（次序）集合"
  },
  "Prim算法": {
    "中文名": "普里姆算法",
    "外文名": "Prim Algorithm",
    "别    名": "最小生成树算法",
    "提出者": "沃伊捷赫·亚尔尼克（Vojtěch Jarník）",
    "提出时间": "1930年",
    "适用领域": "应用图论知识的实际问题",
    "应用学科": "计算机，数据结构，数学（图论）",
    "算    法": "贪心"
  },
  "平方取中法": {
    "中文名": "平方取中法",
    "外文名": "Mid—square Method、Middle-square method",
    "应    用": "一种产生均匀伪随机数的方法",
    "提出者": "冯·诺伊曼",
    "别    名": "冯·诺伊曼取中法"
  },
  "直接插入排序": {
    "中文名": "直接插入排序",
    "外文名": "Straight Insertion Sort",
    "类    型": "插入排序",
    "时间复杂度": "O(n^2)",
    "空间复杂度": "O(1)",
    "稳定性": "稳定"
  },
  "线性表按值查找": {},
  "邻接表法": {},
  "一维数组": {
    "中文名": "一维数组",
    "外文名": "linear array"
  },
  "队列": {
    "中文名": "队列"
  },
  "图": {
    "中文名": "图",
    "拼    音": "tú",
    "注    音": "ㄊㄨˊ",
    "旧    体": "圖",
    "古    字": "𡈖𡇴図圗",
    "部    首": "囗",
    "字    码": "五笔LTUI；仓颉WHEY；郑码JDRT",
    "结    构": "全包围结构",
    "笔    画": "8",
    "笔    顺": "丨フノフ丶丶丶一",
    "字    级": "常用字，一级字",
    "平水韵": "七虞"
  },
  "二叉树的遍历": {},
  "平均查找长度": {
    "中文名": "平均查找长度",
    "外文名": "Average Search Length",
    "简    称": "ASL",
    "其    他": "不详"
  },
  "散列表": {
    "中文名": "哈希表",
    "外文名": "Hash table",
    "别    名": "散列表 非线性表",
    "作    用": "直接进行访问的数据结构"
  },
  "深度优先遍历": {
    "中文名": "深度优先搜索",
    "外文名": "Depth-First-Search",
    "提出者": "霍普克洛夫特与罗伯特·塔扬",
    "应用学科": "计算机"
  },
  "树形结构": {
    "中文名": "树形结构",
    "外文名": "Tree Structure",
    "关    系": "一对多",
    "节    点": "可以是多个",
    "结    构": "非线性结构"
  },
  "树的度": {},
  "双链表的删除": {},
  "折半插入排序": {
    "中文名": "折半插入排序",
    "外文名": "Binary Insertion Sort",
    "类    型": "插入排序",
    "时间复杂度": "O(n^2)",
    "空间复杂度": "O(1)",
    "稳定性": "稳定"
  },
  "二叉树": {
    "中文名": "二叉树",
    "外文名": "Binary Tree",
    "概    述": "计算机中数据结构的一种",
    "简    介": "每个结点最多有两个子树的树结构",
    "应用学科": "计算机科学",
    "存储方式": "顺序存储、链式存储"
  },
  "有序树": {
    "中文名": "有序树",
    "外文名": "OrderedTree",
    "属    于": "是以分支关系定义的层次结构",
    "分    类": "重要的非线性结构"
  },
  "头插法建立单链表": {},
  "处理冲突的方法": {},
  "有穷性": {},
  "结点的高度": {},
  "LR平衡旋转": {},
  "指针数组": {
    "中文名": "指针数组",
    "外文名": "pointer array",
    "主要运用": "作为函数的参量",
    "运用领域": "计算机编程",
    "来    源": "C语言和C++语言",
    "本    质": "“数组”"
  },
  "栈": {
    "中文名": "栈",
    "外文名": "stack",
    "别    名": "栈帧",
    "种    类": "数据结构",
    "说    法": "进栈、出栈",
    "堆栈帧": "函数的返回地址和参数"
  },
  "栈的定义": {},
  "查找表": {
    "中文名": "查找表",
    "学    科": "在计算机科学中",
    "特    点": "用简单的查询操作",
    "类    型": "数据结构"
  },
  "邻接矩阵法": {},
  "链式存储": {
    "中文名": "链式存储",
    "外文名": "linked storage",
    "所属学科": "计算机科学技术",
    "公布时间": "2018年"
  },
  "顺序表的定义": {},
  "AOE网": {
    "中文名": "AOE网",
    "外文名": "Activity On Edge Network",
    "形    式": "图",
    "目    的": "描述和分析工程的计划和过程"
  },
  "Dijkstra算法": {
    "中文名": "迪克斯特拉算法、[1]",
    "外文名": "Dijkstra's Algorithm、[2]",
    "别    名": "狄克斯特拉算法、[1]",
    "分    类": "计算机算法、[1]",
    "用    途": "单源最短路径问题、[1]",
    "简    称": "Dij算法、[1]"
  },
  "数据结构": {
    "中文名": "数据结构",
    "外文名": "data structure",
    "解    释": "计算机存储、组织数据的方式",
    "具体指向": "特定关系的数据元素的集合",
    "有关技术": "检索算法和索引技术",
    "数据结构概述": "数据结构，直白地理解，就是研究数据的存储方式。\n\n我们知道，数据存储只有一个目的，即为了方便后期对数据的再利用，就如同我们使用数组存储 {1,2,3,4,5} 是为了后期取得它们的加和值，无缘由的数据存储行为是对存储空间的不负责任。\n\n因此，数据在计算机存储空间的存放，决不是胡乱的，这就要求我们选择一种好的方式来存储数据，而这也是数据结构的核心内容。\n\n例如，一直以来大家面对的数据存储，都是类似存储 1、2、{a,b,c} 这样的问题，解决方式无疑是用变量或者数组对数据进行存储，即：\nint a=1;\nint b=2;\nchar str[3]={'a','b','c'};\n\n但是，如果要存储这样一组数据：{张亮，张平，张华，张群，张晶，张磊}，数据之间具有这样的关系：张亮是张平、张华和张群的父亲，同时张平还是张晶和张磊的父亲。对于存储之间具有复杂关系的数据，如果还是用变量或数组来存储（比如用数组存储 {“张亮”,\"张平\",“张华”,\"张群\",\"张晶\",\"张磊\"} ），数据存储是没有问题，但是无法体现数据之间的逻辑关系，后期根本无法使用，显然不明智。\n针对此类数据，数据结构中提供有专门的树结构来存储这类数据。\n\n再比如，导航无疑是出游旅行的必备神器，在我们程序员眼中，无论是哪款导航软件，其导航功能的实现都需要大量地图数据的支持。很明显，这些数据绝不是使用变量或数组进行存储的，那样对于数据的使用简直是个悲剧。\n针对此类数据，数据结构提供了图存储结构，专门用于存储这类数据。\n\n通过以上两个示例可以体会出，数据结构教会我们的绝不仅仅是如何存储 1、2、{a,b,c} 这样简单的数据，而是解决具有复杂关系的大量数据的存储问题。\n\n因此，数据结构是什么? 我认为，数据结构是一门学科，它教会我们“如何存储具有复杂关系的数据更有助于后期对数据的再利用”。"
  },
  "线性表的定义": {},
  "后序线索二叉树": {},
  "空间复杂度": {
    "中文名": "空间复杂度",
    "外文名": "space complexity",
    "记    做": "S(n)=O(f(n))。",
    "衡    量": "执行时间和所需要占用的存储空间"
  },
  "插入": {
    "中文名": "插入",
    "外文名": "insert",
    "释    义": "放入、挤入、刺入、穿入",
    "生物操作技术": "基因操作技术",
    "逆反应": "挤出反应"
  },
  "二叉排序树的删除": {},
  "简单图": {
    "中文名": "简单图",
    "外文名": "Simple graph",
    "所属学科": "数学",
    "定    义": "既不含平行边也不含自环的图",
    "表达式": "G(V,E)"
  },
  "链式队列": {
    "中文名": "链式队列",
    "外文名": "linked queue",
    "所属学科": "计算机科学技术",
    "公布时间": "2018年"
  },
  "连通": {
    "中文名": "连通",
    "外文名": "connect",
    "拼    音": "lián tōng",
    "出    处": "唐 张籍 《沉千运旧居》"
  },
  "拉链法": {},
  "再散列法": {},
  "顺序表": {
    "中文名": "顺序表",
    "外文名": "Contiguous List",
    "结    构": "存储结构",
    "形    式": "数组"
  },
  "双亲表示法": {
    "中文名": "双亲表示法",
    "性    质": "通信信息科学类术语"
  },
  "稀疏图": {},
  "交换排序": {
    "中文名": "交换排序",
    "外文名": "Swap Sort",
    "根    据": "根据序列中两个记录",
    "特    点": "键值较大的记录向序列的尾部移动"
  },
  "物理结构": {
    "中文名": "物理结构",
    "又    称": "物理存储结构",
    "含    义": "数据元素的表示和关系的表示"
  },
  "线性表": {
    "中文名": "线性表",
    "外文名": "linear list",
    "元素关系": "一对一",
    "类    别": "一般线性表和受限线性表",
    "优    点": "逻辑结构简单，便于实现和操作",
    "应用学科": "计算机科学、测绘科学、通信工程"
  },
  "双链表": {
    "中文名": "双向链表",
    "亦    称": "双链表",
    "类    别": "链表",
    "特    点": "每个数据结点中都有两个指针",
    "应    用": "孔子电路",
    "方    法": "正序查找，逆序查找"
  },
  "满二叉树": {
    "中文名": "满二叉树",
    "外文名": "Full Binary Tree（国内外定义不同，有歧义）",
    "类    别": "二叉树",
    "特    点": "满二叉树的各个层的结点数形成一个首项为1，公比为2的等比数列",
    "释    义": "一个二叉树的层数为K，且结点总数是(2^k) -1",
    "算    法": "原地快速排序"
  },
  "串长": {
    "中文名": "串长",
    "外文名": "length of a string",
    "所属学科": "计算机科学技术",
    "公布时间": "2018年"
  },
  "邻接多重表": {
    "中文名": "邻接多重表",
    "外文名": "adjacency multilist",
    "性    质": "通信信息科学类术语"
  },
  "折半查找": {
    "中文名": "二分查找",
    "外文名": "Binary Search",
    "别    称": "折半查找",
    "提出者": "John Mauchly",
    "提出时间": "1946",
    "应用学科": "计算机",
    "适用领域范围": "编程语言",
    "优    点": "查找速度快",
    "缺    点": "待查表为有序表",
    "时间复杂度": "O（log2n）、[1]"
  },
  "开放地址法": {
    "中文名": "开放地址法",
    "实    质": "冲突处理方法",
    "包    括": "线性探测再散列",
    "注    意": "不能简单地直接删除"
  },
  "循环双链表": {},
  "平衡二叉树的定义": {},
  "尾插法建立单链表": {},
  "确定性": {
    "中文名": "确定性",
    "外文名": "determinacy",
    "所属学科": "数学",
    "公布时间": "1993年"
  },
  "求线性表长": {},
  "平方探测法": {},
  "数组": {
    "中文名": "数组",
    "外文名": "Array",
    "分    类": "一维、二维（矩阵）、三维数组",
    "定    义": "同类数据元素的集合"
  },
  "图的基本操作": {},
  "非线性结构": {
    "中文名": "非线性结构",
    "外文名": "nonlinear structure",
    "类    型": "树形、图形",
    "特    点": "数据元素一对多、多对多"
  },
  "RR平衡旋转": {},
  "顺序表的基本操作": {},
  "堆排序": {
    "中文名": "堆排序",
    "外文名": "Heapsort",
    "类    别": "排序算法",
    "发明人": "罗伯特·弗洛伊德",
    "起源于": "罗伯特·弗洛伊德"
  },
  "线性表的基本操作": {},
  "数值数组": {},
  "伪随机序列法": {},
  "快速排序": {
    "中文名": "快速排序算法",
    "外文名": "quick sort",
    "别    名": "快速排序",
    "提出者": "C. A. R. Hoare",
    "提出时间": "1960年",
    "适用领域": "Pascal，c++等语言",
    "应用学科": "计算机科学"
  },
  "哈夫曼树": {
    "中文名": "哈夫曼树",
    "外文名": "Huffman Tree",
    "别    名": "最优树",
    "路径长度": "根结点到第L层结点路径长度为L-1",
    "带权路径长度": "WPL",
    "应    用": "哈夫曼编码"
  },
  "存储结构": {
    "中文名": "存储结构",
    "分    类": "顺序存储结构 链式存储结构"
  },
  "哈夫曼树的定义": {},
  "循环链表": {
    "中文名": "循环链表",
    "外文名": "cycle chain或circular linked list",
    "分    类": "单循环，多重链",
    "属    性": "另一种形式的链式存贮结构"
  },
  "多维数组": {},
  "插入排序": {
    "中文名": "插入排序",
    "外文名": "Insertion sort",
    "别    称": "直接插入排序",
    "分    类": "排序方法",
    "时间复杂度": "O(N^(1-2))",
    "空间复杂度": "O(1)",
    "稳定性": "稳定"
  },
  "定长顺序存储": {},
  "初始化线性表": {},
  "回路": {
    "中文名": "回路",
    "拼    音": "huí lù",
    "定    义": "huí lù",
    "也    指": "通常指闭合电路"
  },
  "入度": {
    "中文名": "入度",
    "外文名": "indegree",
    "适用范围": "数理科学"
  },
  "先序遍历": {
    "中文名": "先序遍历",
    "解    释": "先序遍历",
    "源代码": "C",
    "参考资料": "语言与基础算法"
  },
  "算法效率": {
    "中文名": "算法效率",
    "外文名": "algorithm efficiency",
    "依    据": "程序在计算机上运行消耗时间",
    "方    法": "事后统计的方法等",
    "类    型": "算法执行时间",
    "使用范围": "计算机程序语言"
  },
  "查找": {
    "中文名": "查找",
    "拼    音": "cházhǎo",
    "英    译": "[search for;scour]",
    "解    释": "彻底考查或搜寻"
  },
  "基数排序": {
    "中文名": "基数排序",
    "外文名": "Radix sort",
    "别    名": "“桶子法”",
    "类    别": "分配式排序",
    "方    法": "最高位优先法和最低位优先",
    "发明者": "赫尔曼·何乐礼",
    "领    域": "计算机算法"
  },
  "顶点的度": {},
  "循环队列": {
    "中文名": "循环队列",
    "外文名": "Circular Queue",
    "领    域": "数据结构",
    "实现方式": "单链表",
    "有关术语": "队列",
    "特    点": "大小固定"
  },
  "KMP算法": {
    "中文名": "KMP算法、[1]",
    "外文名": "The Knuth-Morris-Pratt Algorithm、[1]",
    "算法基础": "Brute-Force、[2]",
    "应    用": "字符串匹配、[1]",
    "发现者": "D.E.Knuth等、[1]",
    "时间复杂度": "O（m+n）、[1]"
  },
  "散列函数的构造方法": {},
  "集合": {
    "中文名": "集合",
    "外文名": "aggregate",
    "简    称": "集",
    "定    义": "一个或多个确定元素所构成的整体",
    "提出者": "康托尔",
    "创立时间": "19世纪"
  },
  "树的基本概念": {},
  "顺序查找": {
    "中文名": "顺序查找",
    "外文名": "In order to find",
    "性    质": "查找",
    "特    点": "顺序"
  },
  "块链存储": {},
  "图的应用": {},
  "最短路径": {
    "中文名": "最短路径",
    "外文名": "shortest path",
    "性    质": "一类经典算法问题",
    "解决思路": "由已知点/边向外扩展",
    "解决方法": "SPFA算法、Dijkstra算法等"
  },
  "中序遍历": {
    "中文名": "中序遍历",
    "外文名": "Inorder Traversal (LDR)",
    "别    名": "中根遍历",
    "类    属": "二叉树遍历",
    "遍历方法": "先左子树，后根结点，最后右子树",
    "应用学科": "计算机科学"
  },
  "图的存储": {},
  "多重图": {
    "中文名": "多重图",
    "外文名": "multigraph",
    "定    义": "含平行边的图称为多重图",
    "相关概念": "有向图、无向图、平行边等",
    "所属学科": "数理科学"
  },
  "路径": {
    "中文名": "路径",
    "外文名": "path",
    "拼    音": "lùjìng",
    "解    释": "道路",
    "出    自": "明陆深《燕闲录》"
  },
  "稠密图": {},
  "单链表": {
    "中文名": "单链表",
    "外文名": "Singly Linked List",
    "类    型": "数据结构元素",
    "实    质": "一种链式存取的数据结构",
    "简    介": "地址任意的存储单元存放数据元素",
    "建立过程": "申请空间、得到数据、建立链接"
  },
  "有向图": {
    "中文名": "有向图",
    "外文名": "oriented graph",
    "类    型": "表示物件与物件之间的关系",
    "三元组": "V(D)，A(D)，ψD"
  },
  "双端队列": {
    "中文名": "双端队列",
    "外文名": "deque",
    "全    名": "double-ended queue",
    "类    型": "具有队列和栈的性质的数据结构"
  },
  "有向树": {
    "中文名": "有向树",
    "外文名": "Directed Tree",
    "作    用": "定义数据流或流程的逻辑结构",
    "目    标": "数据流是单向分支离开根部",
    "定    义": "定义数据流或流程的逻辑结构",
    "缩    写": "DT"
  },
  "二叉排序树": {
    "中文名": "二叉排序树",
    "外文名": "Binary Sort Tree",
    "别    名": "二叉查找树、二叉搜索树",
    "别称外文名": "Binary Search Tree"
  },
  "二叉树的顺序存储结构": {},
  "连通分量": {
    "中文名": "连通分量",
    "外文名": "connected component",
    "所属领域": "图论、数据结构",
    "别    称": "极大连通子图",
    "相关概念": "无向图、强连通分量等"
  },
  "二叉排序树的构造": {},
  "网": {
    "书    名": "网",
    "作    者": "田永宽",
    "出版社": "中国经济出版社",
    "出版时间": "2011年8月1日",
    "页    数": "368 页",
    "开    本": "16 开",
    "装    帧": "平装",
    "ISBN": "9787513607117"
  },
  "子串": {
    "中文名": "子串",
    "外文名": "Substring",
    "内容1": "一段字符串",
    "内容2": "字符串中包含的一段"
  },
  "串的基本概念": {},
  "B树": {
    "中文名": "B树",
    "外文名": "B tree",
    "别    称": "B-树、B_树",
    "提出者": "R.Bayer和E.mccreight",
    "提出时间": "1970年",
    "应用学科": "计算机",
    "适用领域范围": "编程"
  },
  "生成深林": {},
  "直接定址法": {},
  "分块查找": {
    "中文名": "分块查找",
    "别    名": "索引顺序查找",
    "释    义": "顺序查找的一种改进方法",
    "应用领域": "C语言"
  },
  "出度": {
    "中文名": "出度",
    "外文名": "out-degree",
    "所属学科": "数据结构",
    "相关概念": "有向图、度、出度等"
  },
  "图的定义": {},
  "拓扑排序": {
    "中文名": "拓扑排序",
    "外文名": "topological-sort",
    "别    称": "toposort topsort",
    "应用学科": "计算机科学 图论"
  },
  "队": {
    "中文名": "队",
    "汉语拼音": "duì，zhuì",
    "注音符号": "ㄉㄨㄟˋ，ㄓㄨㄟˋ",
    "平水韵部": "去声第十一·队、[4]",
    "部    首": "阝（左）",
    "笔画数": "2+2",
    "造字法": "会意字或形声字",
    "结    构": "合体字；左右结构",
    "繁    体": "隊",
    "异    体": "墜、𨺵",
    "统一码": "CJK统一汉字-961F",
    "五    笔": "BWY",
    "仓颉码": "NLO",
    "郑    码": "YOD",
    "四角码": "78200",
    "字    级": "一级（0180）、[1]"
  },
  "顺序表的删除": {},
  "树": {
    "中文名": "树",
    "外文名": "tree"
  },
  "冒泡排序": {
    "中文名": "冒泡排序",
    "外文名": "Bubble Sort",
    "所属学科": "计算机科学",
    "时间复杂度": "O（n²）",
    "算法稳定性": "稳定排序算法",
    "实    质": "把小（大）的元素往前（后）调"
  },
  "最小生成树": {
    "中文名": "最小生成树",
    "外文名": "Minimum Spanning Tree,MST",
    "提出者": "Kruskal（克鲁斯卡尔）Prim（普里姆）",
    "应用学科": "计算机，数学（图论），数据结构",
    "适用领域范围": "应用图论知识的实际问题",
    "算    法": "Kruskal算法，Prim算法"
  },
  "图形结构": {},
  "Floyd算法": {
    "中文名": "弗洛伊德算法",
    "外文名": "Floyd(Floyd-Warshall)",
    "别    名": "Roy-Warshall算法",
    "时间复杂度": "O（n^3）",
    "空间复杂度": "O（n^2）",
    "作    用": "求多源最短路径，求传递闭包"
  },
  "并查集": {
    "中文名": "并查集",
    "外文名": "union-find disjoint sets",
    "用    途": "计算机编码"
  },
  "检索": {
    "中文名": "检索",
    "外文名": "index",
    "拼    音": "jiǎn suǒ",
    "基本解释": "检查索取所需要的文字或资料",
    "详细解释": "检查搜索"
  },
  "更新": {
    "中文名": "更新",
    "外文名": "renew；replace",
    "拼    音": "gēng xīn、[1]",
    "词    性": "动词",
    "注    音": "ㄍㄥ ㄒㄧㄣ、[1]"
  },
  "LL平衡旋转": {},
  "广度优先遍历": {
    "中文名": "宽度优先搜索算法",
    "外文名": "BFS",
    "别    名": "广度优先搜索",
    "应用学科": "计算机",
    "适用领域": "计算机"
  },
  "十字链表": {
    "中文名": "十字链表",
    "外文名": "Orthogonal List",
    "属    于": "有向图的另一种链式存储结构",
    "优    点": "达到高效的存取效果"
  },
  "希尔排序": {
    "中文名": "希尔排序",
    "外文名": "Shell's Sort",
    "别    名": "缩小增量排序",
    "类    型": "插入排序",
    "时间复杂度": "O(n^（1.3—2）)",
    "空间复杂度": "O(1)",
    "稳定性": "不稳定"
  },
  "顺序表的插入": {},
  "权": {
    "中文名": "权",
    "拼    音": "quán",
    "繁    体": "權",
    "部    首": "木",
    "五    笔": "SCY、[1]",
    "仓    颉": "DE、[1]",
    "郑    码": "FXS、[1]",
    "笔    顺": "横、竖、撇、点、横撇、捺、[5]",
    "字    级": "一级（编号：0378）、[2]",
    "平水韵": "下平声·一先、[4]",
    "统一码": "U+6743、[1]",
    "总笔画数": "4+2",
    "四角码": "4794₀、[1]",
    "造字法": "形声字",
    "字形结构": "合体字，左右结构",
    "注音字母": "ㄑㄩㄢˊ",
    "异体字": "権"
  },
  "外部排序": {
    "中文名": "外部排序",
    "指内排序": "快速排序，堆排序，归并排序",
    "内排序": "可以在内存中完成的排序",
    "相    关": "初始化堆"
  },
  "链表": {
    "中文名": "链表",
    "外文名": "linked list",
    "分    类": "计算机数据结构",
    "构    成": "一系列结点组成"
  },
  "生成树": {
    "中文名": "生成树协议",
    "外文名": "Spanning Tree Protocol",
    "提出者": "拉迪亚·珀尔曼博士",
    "适用领域": "通信领域",
    "应用学科": "计算机",
    "类    型": "链路管理协议"
  },
  "散列结构": {},
  "单链表的基本操作": {},
  "队头": {
    "中文名": "队头",
    "外文名": "front",
    "所属学科": "计算机科学技术",
    "公布时间": "2018年"
  },
  "堆分配存储": {},
  "内部排序": {},
  "顺序栈的基本运算": {},
  "完全图": {
    "中文名": "完全图",
    "外文名": "complete graph",
    "领    域": "数学",
    "概    念": "每对顶点之间都恰连有一条边的图",
    "分    类": "有向完全图，无向完全图",
    "相关名词": "无向图"
  },
  "主串": {
    "中文名": "主串",
    "类    型": "数据结构术语",
    "定    义": "零个或多个字符组成的有限序列",
    "空    串": "长度为零的串"
  },
  "暴力匹配算法": {},
  "简单路径": {
    "中文名": "简单路径",
    "外文名": "Simple path",
    "所属学科": "数学",
    "相关概念": "图，路径等"
  },
  "平衡二叉树": {
    "中文名": "平衡树",
    "外文名": "Balance Tree，BT、[1]",
    "提    升": "存储空间利用率、[1]",
    "领    域": "通信",
    "由    来": "对“2-3树”的改造、[1]"
  },
  "查找的基本概念": {},
  "顺序栈": {
    "中文名": "顺序栈",
    "性    质": "通信信息科学术语"
  },
  "归并排序": {
    "中文名": "归并排序",
    "外文名": "Merge Sort",
    "稳定性": "稳定",
    "时间复杂度": "O(n log n)",
    "空间复杂度": "T（n)",
    "发明者": "约翰·冯·诺伊曼"
  },
  "链式队列初始化": {},
  "排序": {
    "中文名": "排序",
    "外文名": "sequence",
    "性    质": "计算机内经常进行的一种操作",
    "排序算法": "快速排序、希尔排序、堆排序等",
    "分    类": "稳定排序等",
    "应用学科": "数学 计算机"
  },
  "二叉平衡树": {},
  "树的定义": {},
  "线性表按位查找": {},
  "线索二叉树": {
    "中文名": "线索二叉树",
    "外文名": "Threaded BinaryTree",
    "领    域": "计算机科学"
  },
  "后序遍历": {
    "中文名": "后序遍历",
    "外文名": "Postorder Traversal (LRD)",
    "别    名": "后根遍历",
    "类    型": "二叉树遍历",
    "方    式": "先依次遍历左右子树，最后根结点",
    "应用学科": "计算机科学"
  },
  "距离": {
    "中文名": "再见，在也不见",
    "外文名": "Distance",
    "其他译名": "距离",
    "类    型": "爱情，剧情，家庭",
    "制片地区": "中国",
    "拍摄地点": "中国、新加坡、泰国",
    "导    演": "忻钰坤，陈世杰，西瓦罗·孔萨库",
    "制片人": "张建彬，黄文鸿",
    "主    演": "陈柏霖、蒋雯丽、秦沛、杨佑宁",
    "片    长": "108 分钟",
    "上映时间": "2016年3月25日（中国台湾）、2016年5月13日（中国大陆）",
    "对白语言": "普通话",
    "色    彩": "彩色",
    "imdb编码": "tt4907174",
    "出品时间": "2015年"
  },
  "逻辑结构": {
    "中文名": "逻辑结构",
    "外文名": "Logical Structure",
    "学    科": "信息工程",
    "领    域": "工程技术"
  },
  "线性探测法": {},
  "顺序存储": {
    "中文名": "顺序存储",
    "外文名": "Sequential Storage",
    "学    科": "计算机科学与技术",
    "领    域": "数据结构",
    "优    点": "存储空间利用概率高",
    "特    点": "逻辑与物理统一"
  },
  "栈的基本操作": {},
  "顺序栈的实现": {},
  "二叉树的链式存储结构": {},
  "树的高度": {},
  "Kruskal算法": {
    "中文名": "克鲁斯卡尔算法、[1]",
    "外文名": "Kruskal algorithm、[2]",
    "应用领域": "数理科学、[1]",
    "学    科": "运筹学、[1]",
    "目    的": "用来查找最小生成树、[1]",
    "类似算法": "普里姆算法、[1]"
  }
}